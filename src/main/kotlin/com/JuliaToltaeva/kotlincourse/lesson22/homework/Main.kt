package com.juliatoltaeva.com.JuliaToltaeva.kotlincourse.lesson22.homework

//Домашнее задание оформляем в ветке master в пакете lesson22.homework,
// расширения для каждого типа создаём в отдельном файле TypeExt как я
// показывал на уроке. При невыполнении этого требования домашка не засчитывается.


//Задача 2:Сконструируй объекты, позволяющие вызвать определённые выше функции
// и вызови их.

fun main() {

    val object1: Array<Int> = arrayOf(1, 2, 3)

    val object2: Char = 'c'

    val object3: MutableList<Number?> = mutableListOf(
        1,
        2,
        null
    )

    val object4: Map<String?, List<String>> = mapOf(
        null to listOf("string1", "string2", "string3"),
        "10" to listOf("string1", "string2", "string3"),
        "20" to listOf("string1", "string2", "string3"),
    )

    val object5: Long = 123455678L

    val movingPair1 = Pair("ключ", "значение")

    val movingPair2 = Pair(null, "значение")

    val movingPair3 = Pair("ключ", null)

    val movingPair4 = Pair(null, null)



    object1.useArray()

    object2.useChar(1, 2, true)

    object3.useMutableList(10, 20)

    object4.useMap(10)

    object5.useLong()


    println("movingPair1 ${movingPair1.revert()}")

    println("movingPair2 ${movingPair2.revert()}")

    println("movingPair3 ${movingPair3.revert()}")

    println("movingPair4 ${movingPair4.revert()}")




}




//Задача 4: Проверка допустимого отклонения числа
//Реализуйте метод расширения within для класса Number, который проверяет,
// что текущее число отклоняется от эталонного не более допустимого значения.
// Метод принимает два параметра: other — число для сравнения и deviation —
// максимально допустимое отклонение. Метод должен возвращать true, если разница
// между текущим числом и числом для сравнения не превышает заданное отклонение.
// Протестируйте функцию на разных типах чисел. Для получения отклонения, у
// разницы чисел нужно вызвать свойство absoluteValue.

//Задача 5: Кодер-декодер строк
//Реализуйте для класса String два метода расширения: encrypt и decrypt.
// Метод encrypt должен сдвигать каждый символ исходной строки на заданное
// число позиций вперед по таблице Unicode, а метод decrypt — на то же число
// позиций назад. Оба метода принимают один параметр base типа Int, который
// определяет величину сдвига. Протестируйте вашу реализацию, убедившись, что
// после шифрования и последующей расшифровки строка возвращается к исходному
// состоянию.
//Сдвиг по таблице Unicode реализуется простым прибавлением или вычитанием размера сдвига к char символу.

//Задача 6: Собери пидмаркоз!
//
//Многие уже знают любимую игру в Твиттере - собирание разных слов из букв через ответы (но мы то знаем что слово только одно, но не будем его называть). Напиши метод расширения строки, который будет принимать список имён пользователей и выводить в консоли эту строку побуквенно в столбик: имя автора и букву под ним. Если сможешь повторить оригинальный шаблон вывода ответов с помощью похожих ASCII символов, будет очень круто. Вот ссылка на референс:
//https://x.com/SadNSober_/status/1370280031616897026
//
//Если не удаётся открыть ссылку, вот скрин
//
//
//
//
//
//Решения доступны по ссылке (после отправки доната)
//17. Расширение классов - решения



