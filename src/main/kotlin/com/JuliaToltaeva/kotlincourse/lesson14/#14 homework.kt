package com.juliatoltaeva.com.JuliaToltaeva.kotlincourse.lesson14

fun main(){

//    Для решения каждой задачи постарайтесь использовать наиболее подходящий метод,
//    не повторяясь с решением других задач.

//    Дан словарь с именем и временем выполнения каждого автоматизированного теста
//    в секундах. Определите среднее время выполнения теста.

    val passTest = mapOf(
        "Тест1" to 1,
        "Тест2" to 2,
        "Тест3" to 3,
        "Тест4" to 4,
        "Тест5" to 5
    )

    val averageTimeTest = passTest.values
        .average()

    println("averageTimeTest $averageTimeTest\n")

//    Имеется словарь с метаданными автоматизированных тестов, где ключи —
//    это имена тестовых методов, а значения - строка с метаданными.
//    Выведите список всех тестовых методов.

    val testMeta = mapOf(
        "Тестовый метод1" to "Метаданные1",
        "Тестовый метод2" to "Метаданные2",
        "Тестовый метод3" to "Метаданные3",
        "Тестовый метод4" to "Метаданные4",
        "Тестовый метод5" to "Метаданные5"
    )

    val listTestMethod = testMeta.keys

    println("listTestMethod $listTestMethod\n")

//    В изменяемый словарь с данными о прохождении тестов добавьте новый тест
//    и его результат.

    val passTestNew = passTest + ("Тест6" to 6)
    println("passTestNew $passTestNew\n")

//    Посчитайте количество успешных тестов в словаре с результатами.

    val successfulTests = passTest
        .count { it.value < 3 }
    println("successfulTests $successfulTests\n")

//    Удалите из изменяемого словаря с баг-трекингом запись о баге,
//    который был исправлен.

    val testMeta1 = mutableMapOf(
        "Тестовый метод1" to "Баг1",
        "Тестовый метод2" to "Баг2",
        "Тестовый метод3" to "Баг3",
        "Тестовый метод4" to "Баг4",
        "Тестовый метод5" to "Баг5"
    )

    val testMetaNew = testMeta1 - "Тестовый метод1"
    println("testMetaNew $testMetaNew\n")

//    Для словаря с результатами тестирования веб-страниц (ключ — URL страницы,
//    значение — статус ответа), выведите сообщение о странице и статусе её проверки.

    val testUrl = mapOf(
        "URL_1" to "404",
        "URL_2" to "505",
        "URL_3" to "501",
        "URL_4" to "200",
        "URL_5" to "200"
    )

    println("testUrl")

    testUrl.forEach {
        println("${it.key} status ${it.value}")
    }

//    Найдите в словаре с названием и временем ответа сервисов только те,
//    время ответа которых превышает заданный порог.

    val respTimeServ = mapOf(
        "Service_1" to 100,
        "Service_2" to 200,
        "Service_3" to 300,
        "Service_4" to 400,
        "Service_5" to 500
    )

    val respTimeServNew = respTimeServ
        .filter { it.value < 200 }

    println("respTimeServNew $respTimeServNew\n")

//    В словаре хранятся результаты тестирования API (ключ — endpoint, значение —
//    статус ответа в строке). Для указанного endpoint найдите статус ответа,
//    если endpoint отсутствует, предположите, что он не был протестирован.

    val testAPI = mapOf(
        "EndPoint_1" to "200",
        "EndPoint_2" to "500",
        "EndPoint_3" to "505",
        "EndPoint_4" to "200",
        "EndPoint_5" to "505"
    )

    val testAPINew1 = testAPI.getOrElse("EndPoint_3") {
        Exception("не был протестирован")
    }
    val testAPINew2 = testAPI.getOrElse("EndPoint_10") {
        Exception("не был протестирован")
    }

    println("TestAPINew $testAPINew1")
    println("TestAPINew $testAPINew2\n")

//    Из словаря, содержащего конфигурации тестового окружения
//    (ключ — название параметра конфигурации), получите значение
//    для "browserType". Ответ не может быть null.

    val testEnvConfig = mapOf(
        "browserType" to "Яндекс Браузер Версия 24.7.6.974 (64-bit)",
        "ConfigName_2" to "Description2",
        "ConfigName_3" to "Description3",
        "ConfigName_4" to "Description4",
        "ConfigName_5" to "Description5"
    )

    val testEnvConfigBrowser = testEnvConfig
        .getOrDefault("browserType", "")

    println("testEnvConfigBrowser $testEnvConfigBrowser\n")


//    Создайте копию неизменяемого словаря с данными о версиях тестируемого ПО,
//    чтобы добавить новую версию.

//    Используя словарь с настройками тестирования для различных мобильных устройств
//    (ключ — модель устройства), получите настройки для конкретной модели или
//    верните настройки по умолчанию.

//    Проверьте, содержит ли словарь с ошибками тестирования (код и описание)
//    определенный код ошибки.

//    Дан неизменяемый словарь, где ключи — это идентификаторы тестовых сценариев
//    в формате "TestID_Version", а значения — статусы выполнения этих тестов
//    ("Passed", "Failed", "Skipped"). Отфильтруйте словарь, оставив только те сценарии,
//    идентификаторы которых соответствуют определённой версии тестов.

//    У вас есть словарь, где ключи — это названия функциональных модулей приложения,
//    а значения — результаты их тестирования. Проверьте, есть ли модули с неудачным тестированием.

//    Добавьте в изменяемый словарь с настройками тестовой среды настройки из другого словаря.

//    Объедините два неизменяемых словаря с данными о багах.

//    Очистите изменяемый словарь с временными данными о последнем прогоне автоматизированных тестов.

//    Исключите из отчета по автоматизированному тестированию те случаи,
//    где тесты были пропущены (имеют статус “skipped”)

//    Удалите из словаря с конфигурациями тестирования набор устаревших конфигураций.

//    Создайте отчет о тестировании, преобразовав словарь с результатами тестирования
//    (ключ — идентификатор теста, значение — результат) в список строк формата
//    "Test ID: результат".

//    Преобразуйте изменяемый словарь с результатами последнего тестирования
//    в неизменяемый для архивации.

//    Преобразуйте словарь, содержащий ID теста и данные о времени выполнения тестов,
//    заменив идентификаторы тестов на их названия (название можно получить вызвав
//    фейковый метод, например getNameById(id: String))

//    Для словаря с оценками производительности различных версий приложения увеличьте
//    каждую оценку на 10%, чтобы учесть новые условия тестирования.

//    Проверьте, пуст ли словарь с ошибками компиляции тестов.

//    Убедитесь, что словарь с результатами нагрузочного тестирования не пуст.

//    Проверьте, прошли ли успешно все автоматизированные тесты в словаре с результатами.

//    Определите, содержит ли словарь с результатами тестирования хотя бы один тест с ошибкой.

//    Отфильтруйте словарь с результатами тестирования сервисов, оставив только те тесты,
//    которые не прошли успешно и содержат в названии “optional”.



}